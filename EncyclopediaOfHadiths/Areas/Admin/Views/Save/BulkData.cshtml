        @model List<EncyclopediaOfHadiths.Models.NarratorsChain>
@{
    ViewBag.Title = "Insert Bulk Data";
}

<style>
    th {
        text-align:left;
    }
    td {
    padding:5px;
}
</style>
<div style="width:700px; padding:5px; background-color:white;">
    @using (Html.BeginForm("BulkData","Save", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        
        if (ViewBag.Message != null)
        {
            <div style="border:solid 1px green">
                @ViewBag.Message
            </div>
        }
        
        <div><a href="#" id="addNew">Add New</a></div>
        <table id="dataTable" border="0" cellpadding="0" cellspacing="0">
            <tr>
               <th>Hadith NO</th>
                <th>Narrator Name</th>
                <th>Narrator NO</th>
                <th></th>
            </tr>
            @if (Model != null && Model.Count > 0)
	        {
                int j = 0;
                foreach (var i in Model)
                {
                    <tr style="border:1px solid black">

                        <td>@Html.TextBoxFor(a=>a[j].HadithId)</td>
                        <td>@Html.TextBoxFor(a=>a[j].NarratorId)</td>
                        <td>@Html.TextBoxFor(a=>a[j].NarratorLevel)</td>
                        
                        @*<td>@Html.DropDownListFor(a=>a[j].NarratorId,(IEnumerable<SelectListItem>)ViewBag.narrators as SelectList,new { @type = "" })</td>
                        <td>@Html.DropDownListFor(a=>a[j].NarratorLevel,(IEnumerable<SelectListItem>)ViewBag.levels as SelectList,new { @type = "" })</td>
                        <td>@Html.DropDownListFor(a=>a[j].HadithId,(IEnumerable<SelectListItem>)ViewBag.hadiths as SelectList,new { @type = "" })</td>
                        *@
                        
                        
                        <td>
                            @if (j > 0)
                            {
                                <a href="#" class="remove">Remove</a>
                            }
                        </td>
                    </tr>
                    j++;
                }
	        }
        </table>
        <input type="submit" value="Save Bulk Data" />
    }
</div>


        @* Here I will add Jquery Code for validation / dynamically add new rows / Remove rows etc *@
        @*<td>@Html.DropDownListFor(a=>a[j].HadithId,(IEnumerable<SelectListItem>)ViewBag.Hadith,"select",new { @class = "" })</td>
                                <td>@Html.DropDownListFor(a=>a[j].NarratorId,(IEnumerable<SelectListItem>)ViewBag.Narrator,"select",new { @class = "" })</td>*@

        @section Scripts{
            @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
         
            <script language="javascript">
        $(document).ready(function () {

            //1. Add new row
            $("#addNew").click(function (e) {
                e.preventDefault();
                var $tableBody = $("#dataTable");
                var $trLast = $tableBody.find("tr:last");
                var $trNew = $trLast.clone();

                var suffix = $trNew.find(':input:first').attr('name').match(/\d+/);
                $trNew.find("td:last").html('<a href="#" class="remove">Remove</a>');
                $.each($trNew.find(':input'), function (i, val) {
                    // Replaced Name
                    var oldN = $(this).attr('name');
                    var newN = oldN.replace('[' + suffix + ']', '[' + (parseInt(suffix) + 1) + ']');
                    $(this).attr('name', newN);
                    //Replaced value
                    var type = $(this).attr('type');
                    if (type.toLowerCase() == "text") {
                        $(this).attr('value', '');
                    }

                  



                    // If you have another Type then replace with default value
                    $(this).removeClass("input-validation-error");

                });
                $trLast.after($trNew);

                // Re-assign Validation 
                var form = $("form")
                    .removeData("validator")
                    .removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);
            });

            // 2. Remove 
            $('a.remove').live("click", function (e) {
                e.preventDefault();
                $(this).parent().parent().remove();
            });

        });
    </script>
        
                        
                       
                        
                        }
        
    
    